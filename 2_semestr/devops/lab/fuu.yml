- name: Полная установка и настройка microk8s-кластера
  hosts: all
  become: true
  vars:
    namespace: demo-apps

  tasks:
    - name: Установка зависимостей
      apt:
        name: snapd
        state: present
        update_cache: true

    - name: Установка microk8s
      snap:
        name: microk8s
        classic: true

    - name: Добавление пользователя в группу microk8s
      user:
        name: "{{ ansible_user }}"
        groups: microk8s
        append: true

    - name: Установка alias
      shell: snap alias microk8s.kubectl kubectl
      args:
        creates: /snap/bin/kubectl

- name: Get join command from master
  hosts: master
  become: yes

  tasks:
    - name: Generate join command
      shell: microk8s add-node
      register: add_node_output
      changed_when: false

    - name: Set join command as fact
      set_fact:
        join_command: "{{ add_node_output.stdout_lines[1] }}"

    - name: Debug join command
      debug:
        var: join_command

# - name: Join worker to cluster
#   hosts: worker
#   become: yes

#   tasks:
#     - name: Join worker to cluster
#       shell: "{{ hostvars[groups['masters'][0]].join_command }}"
#       register: join_output
#       failed_when: "'already known to dqlite' not in join_output.stderr and join_output.rc != 0"
#       changed_when: "'already known to dqlite' not in join_output.stderr"

- name: Включение аддонов и настройка приложений
  hosts: master
  become: true
  vars:
    namespace: demo-apps
  tasks:
    - name: Включение dashboard
      shell: microk8s enable dashboard

    - name: Включение dns
      shell: microk8s enable dns

    - name: Включение ingress
      shell: microk8s enable ingress
    - name: Включение registry
      shell: microk8s enable registry:size=1Gi

    - name: Создание namespace
      shell: microk8s kubectl create namespace {{ namespace }}
      register: ns_created
      failed_when: ns_created.rc != 0 and "AlreadyExists" not in ns_created.stderr

    - name: Деплой приложения 1 и сервиса
      copy:
        dest: /tmp/app1.yml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: python-server
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: python-server
            template:
              metadata:
                labels:
                  app: python-server
              spec:
                containers:
                - name: python-http-server
                  image: python:2.7
                  command: ["/bin/bash"]
                  args: ["-c", "echo \" Hello from $(hostname)\" > index.html; python -m SimpleHTTPServer 80"]
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: python-service
            namespace: {{ namespace }}
          spec:
            selector:
              app: python-server
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: ClusterIP

    - name: Применение app1
      shell: microk8s kubectl apply -f /tmp/app1.yml

    - name: Деплой приложения 2 и сервиса
      copy:
        dest: /tmp/app2.yml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-demo
            namespace: {{ namespace }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx-demo
            template:
              metadata:
                labels:
                  app: nginx-demo
              spec:
                containers:
                - name: nginx-demo
                  image: nginxdemos/hello
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: {{ namespace }}
          spec:
            selector:
              app: nginx-demo
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
            type: ClusterIP

    - name: Применение app2
      shell: microk8s kubectl apply -f /tmp/app2.yml

    - name: Ingress
      copy:
        dest: /tmp/ingress.yml
        content: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: demo-ingress
            namespace: {{ namespace }}
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: helloworld.k8s.cluster
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: python-service
                      port:
                        number: 80
            - host: myapp.k8s.cluster
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: nginx-service
                      port:
                        number: 80
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: dashboard-ingress
            namespace: kube-system
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/secure-backends: "true"
          spec:
            rules:
            - host: dashboard.k8s.cluster
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: kubernetes-dashboard
                      port:
                        number: 8443
    - name: Применение ingress
      shell: microk8s kubectl apply -f /tmp/ingress.yml
